"""
The Verifier() class will check file integrity every time the game is loaded.
Please do not edit this file (and definitely don't delete it).
"""

# Imports
import os

# Constants
PATHS = (
    ("config", "conf.toml"),
    ("interfaces", "__init__.py"),
    ("interfaces", "base.py"),
    ("interfaces", "game_interface.py"),
    ("interfaces", "game_loader.py"),
    ("interfaces", "game_setup.py"),
    ("interfaces", "language_interface.py"),
    ("interfaces", "main_menu.py"),
    ("interfaces", "settings_interface.py"),
    ("interfaces", "updates_check_interface.py"),
    "lang",
    ("utils", "__init__.py"),
    ("utils", "system.py"),
    ("utils", "text.py"),
    "config_loader.py",
    "expression.py",
    "game.py",
    "lang_loader.py",
    "main.py",
    "question.py",
    "specific_exception.py",
    "start.py",
    "term.py"
)


# Verifier
class Verifier:
    @staticmethod
    def verify():
        for path_element in PATHS:
            checked_path = os.path.join(*path_element) if type(path_element) is tuple else path_element
            print(checked_path, end=": ")
            if not os.path.exists(checked_path):
                print("ERR")
                return False, checked_path
            print("OK")
        return True, None


# Function
def verify_handler_messages(language_data):
    try:
        for item in [
            "anErrorOccurredText",
            "couldNotLocateText",
            "couldNotImportText",
            "exceptionMessageFilledText",
            "ModuleNotFoundErrorText",
            "ImportErrorText",
            "pleaseReinstallText"
        ]:
            if item not in language_data["exceptionHandling"]:
                return False
        return True
    except KeyError:
        return False
